#include "../JumpLib/json/json.h"

void JsonTest()
{	
	Json::Value root;                                  //表示整个json对象
	root["key_string"] = Json::Value("value_string");  //新建一个Key（名为：key_string），赋予字符串值："value_string"。 
	root["key_number"] = Json::Value(12345);           //新建一个Key（名为：key_number），赋予数值：12345。 
	root["key_boolean"] = Json::Value(false);          //新建一个Key（名为：key_boolean），赋予bool值：false。
	root["key_double"] = Json::Value(12.345);          //新建一个Key（名为：key_double），赋予double值：12.345。
	Json::Value json_temp;                             //临时对象，供如下代码使用
	json_temp["name"] = Json::Value("Hello");
	json_temp["age"] = Json::Value(26);
	root["key_object"] = json_temp;                    //新建一个Key（名为：key_object），赋予json::Value对象值。
	root["key_array"].append("array_string");          //新建一个Key（名为：key_array），类型为数组，对第一个元素赋值为字符串："array_string"。
	root["key_array"].append(1234);                    //为数组key_array赋值，对第二个元素赋值为：1234。
	// 写
	Json::FastWriter writer;
	//Json::StyledWriter writer;
	std::string strOut = writer.write(root);
	std::cout << strOut << std::endl;
	// 读
	Json::Reader reader;
	Json::Value json_object;
	if (!reader.parse(strOut, json_object))
		return;
	std::cout << json_object["key_string"] << std::endl;
	std::cout << json_object["key_number"] << std::endl;
	std::cout << json_object["key_boolean"] << std::endl;
}

